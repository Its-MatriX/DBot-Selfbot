from discord import Status, Streaming, Game, Activity, ActivityType
from discord.ext import commands

import random
from re import findall


def spam_string_parse(message):
    if not ('?digit' in message or '?letter' in message or '?prep' in message
            or '?char' in message):
        return message

    for x in range(message.count('?digit')):
        message = message.replace('?digit', str(random.randint(0, 9)), 1)

    for x in range(message.count('?letter')):
        message = message.replace('?letter',
                                  random.choice('QWERTYUIOPASDFGHJKLZXCVBNM'),
                                  1)

    for x in range(message.count('?prep')):
        message = message.replace('?prep', random.choice('.!?'), 1)

    if '?char' in message:
        searches_randchar = findall('\?char \d+,\s*\d+', message)

        for s in searches_randchar:
            vals = s.replace('?char ', '').split(',')
            start = int(vals[0])
            end = int(vals[1])
            if start >= end:
                raise TypeError(
                    '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ')
            if start < 0 or end < 0:
                raise TypeError(
                    '?char <start> –∏–ª–∏ ?char <end> –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0')
            message = message.replace(s, chr(random.randint(start, end)))

    return message


class toolsCog(commands.Cog):

    spammer_is_working = False

    def __init__(self, bot):
        self.bot = bot

    @commands.command(name='user')
    async def user__(self, ctx, user):
        if ctx.author != self.bot.user:
            return

        in_guild = False

        user = user.replace('<@', '')
        user = user.replace('!', '')
        user = user.replace('>', '')
        user = int(user)
        user = await self.bot.fetch_user(
            user) if not ctx.guild else await ctx.guild.fetch_member(user)

        username = str(user)

        try:
            if user.guild:
                in_guild = True
                if user.status == Status.online:
                    status = '–í —Å–µ—Ç–∏'

                if user.status == Status.idle:
                    status = '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'

                if user.status == Status.dnd:
                    status = '–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å'

                if user.status == Status.offline:
                    status = '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'

                if user.is_on_mobile():
                    status += ' (—Ç–µ–ª–µ—Ñ–æ–Ω)'

                else:
                    status += ' (–ü–ö)'

            try:
                is_owner = '–î–∞' if user.owner else '–ù–µ—Ç'
            except:
                is_owner = '–ù–µ—Ç'
            is_admin = '–î–∞' if user.guild_permissions.administrator else '–ù–µ—Ç'
        except:
            pass

        is_bot = '–î–∞' if user.bot else '–ù–µ—Ç'

        response = ''

        response += f'**–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** `{username}`\n'

        if in_guild:
            response += f'**–°—Ç–∞—Ç—É—Å**: `{status}`\n'
            response += f'**–í–ª–∞–¥–µ–ª–µ—Ü**: `{is_owner}`\n'
            response += f'**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä**: `{is_admin}`\n'

        response += f'**–ë–æ—Ç**: `{is_bot}`\n'

        response = response.replace('\n??delthis', '')

        await ctx.message.delete()
        await ctx.send(response)

    @commands.command(name='status')
    async def status__(self, ctx, *, status=None):
        if ctx.author != self.bot.user:
            return

        await ctx.message.delete()

        if not status:
            resp = 'ü™Ñ **status <*–ø–∞—Ä–∞–º–µ—Ç—Ä—ã*>:** `—Å–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å`\n' + \
                        '`status idle` - —Å–º–µ–Ω–∏—Ç—å –∏–∫–æ–Ω–∫—É –Ω–∞ `–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω`\n' + \
                        '\n' + \
                        '**–ò–∫–æ–Ω–∫–∏:**\n' + \
                        'üü¢ `online` - *–≤ —Å–µ—Ç–∏*\n' + \
                        'üü° `idle` - *–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω*\n' + \
                        'üî¥ `dnd` - *–Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å*\n' + \
                        '‚ö™ `invisible` - *–Ω–µ–≤–∏–¥–∏–º–∫–∞*\n' + \
                        '\n' + \
                        '**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**\n' + \
                        '‚ùå **delete** - `—Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å`\n' + \
                        'üìΩÔ∏è **streaming <*—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∏–º*> <*–∏–º—è —Å—Ç—Ä–∏–º–∞*>** - `—Å—Ç—Ä–∏–º–∏—Ç`\n' + \
                        'üéÆ **game <*–∏–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞*> <*–∏–º—è –∏–≥—Ä—ã*>** - `–∏–≥—Ä–∞–µ—Ç –≤`\n' + \
                        'üì∫ **watch <*–∏–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞*> <*–∏–º—è*>** - `—Å–º–æ—Ç—Ä–∏—Ç`\n' + \
                        'üÜö **competing <*–∏–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞*> <*–∏–º—è*>** - `—Å–æ—Ä–µ–≤–Ω—É–µ—Ç—Å—è –≤`\n' + \
                        'üéß **listening <*–∏–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞*> <*–∏–º—è*>** - `—Å–ª—É—à–∞–µ—Ç`\n'

            await ctx.send(resp)
            return

        if status == 'delete':
            await self.bot.change_presence(status=Status.online, activity=None)

        if status == 'online':
            await self.bot.change_presence(status=Status.online)
            return

        elif status == 'idle':
            await self.bot.change_presence(status=Status.idle)
            return

        elif status == 'dnd':
            await self.bot.change_presence(status=Status.dnd)
            return

        elif status == 'invisible':
            await self.bot.change_presence(status=Status.invisible)
            return

        if ' ' not in status:
            return

        status = status.split(' ')

        if status[0] == 'streaming':
            twitch_url = 'https://' + status[1] if 'https://' not in status[
                1] else status[1]
            stream_name = ' '.join(status[2:])

            await self.bot.change_presence(activity=Streaming(name=stream_name,
                                                              url=twitch_url),
                                           status=Status.online)
            return

        elif status[0] == 'game':
            if status[1] == 'online':
                status_icon = Status.online

            elif status[1] == 'idle':
                status_icon = Status.idle

            elif status[1] == 'dnd':
                status_icon = Status.dnd

            elif status[1] == 'invisible':
                status_icon = Status.invisible

            await self.bot.change_presence(
                activity=Game(name=' '.join(status[2:])), status=status_icon)

        elif status[0] == 'watch':
            if status[1] == 'online':
                status_icon = Status.online

            elif status[1] == 'idle':
                status_icon = Status.idle

            elif status[1] == 'dnd':
                status_icon = Status.dnd

            elif status[1] == 'invisible':
                status_icon = Status.invisible

            await self.bot.change_presence(activity=Activity(
                type=ActivityType.watching, name=' '.join(status[2:])),
                                           status=status_icon)

        elif status[0] == 'listening':
            if status[1] == 'online':
                status_icon = Status.online

            elif status[1] == 'idle':
                status_icon = Status.idle

            elif status[1] == 'dnd':
                status_icon = Status.dnd

            elif status[1] == 'invisible':
                status_icon = Status.invisible

            await self.bot.change_presence(activity=Activity(
                type=ActivityType.listening, name=' '.join(status[2:])),
                                           status=status_icon)

        elif status[0] == 'competing':
            if status[1] == 'online':
                status_icon = Status.online

            elif status[1] == 'idle':
                status_icon = Status.idle

            elif status[1] == 'dnd':
                status_icon = Status.dnd

            elif status[1] == 'invisible':
                status_icon = Status.invisible

            await self.bot.change_presence(activity=Activity(
                type=ActivityType.competing, name=' '.join(status[2:])),
                                           status=status_icon)

    @commands.command(name='spam')
    async def spam__(self, ctx, amount=None, *, content=None):
        if ctx.author != self.bot.user:
            return

        await ctx.message.delete()

        if not amount and not content:
            resp =  'üî• **spam <*–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ*> <*—Ç–µ–∫—Å—Ç/–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã*>:** `—Å–ø–∞–º`\n' + \
                    '**–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:**\n' + \
                    '`?digit` - *—Ü–∏—Ñ—Ä–∞*\n' + \
                    '`?letter` - *–ª–∞—Ç–∏–Ω—Å–∫–∞—è –±—É–∫–≤–∞*\n' + \
                    '`?prep` - *–∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è*\n' + \
                    '`?char <–º–∏–Ω.>, <–º–∞–∫—Å>` - *—Å–∏–º–≤–æ–ª —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º*\n'

            await ctx.send(resp)
            return

        try:
            spam_string_parse(content)
        except:
            return

        try:
            amount=int(amount)
        except:
            pass

        self.spammer_is_working = True

        if not self.spammer_is_working:
            return

        for _ in range(amount):
            if not self.spammer_is_working:
                return
            await ctx.send(spam_string_parse(content))

    @commands.command(name='stop_spam')
    async def stop_spam__(self, ctx):
        if ctx.author != self.bot.user:
            return

        await ctx.message.delete()

        self.spammer_is_working = False


def setup(bot):
    bot.add_cog(toolsCog(bot))
